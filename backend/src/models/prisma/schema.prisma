// Prisma schema placeholder
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  password   String
  firstName  String
  lastName   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  campaigns  Campaign[]
  leads      Lead[]
  activities Activity[]
  preferences Preferences?
}

model Campaign {
  id            String    @id @default(uuid())
  name         String
  status       CampaignStatus
  platform     Platform
  leadsCount   Int
  qualifiedCount Int
  budget       Decimal
  spent        Decimal
  startDate    DateTime
  endDate      DateTime
  conversionRate Float
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  leads        Lead[]
  activities   Activity[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Lead {
  id           String    @id @default(uuid())
  name         String
  title        String
  company      String
  email        String
  phone        String
  score        Int
  status       LeadStatus
  source       Platform
  campaignId   String
  campaign     Campaign  @relation(fields: [campaignId], references: [id])
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  lastActivity DateTime
  tags         String[]
  activities   Activity[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Activity {
  id         String    @id @default(uuid())
  type       ActivityType
  action     String
  details    String
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  leadId     String?
  lead       Lead?     @relation(fields: [leadId], references: [id])
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  createdAt  DateTime  @default(now())
}

model Preferences {
  id             String    @id @default(uuid())
  userId         String    @unique
  user           User      @relation(fields: [userId], references: [id])
  theme          String    @default("LIGHT")
  notifications  Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  DRAFT
}

enum Platform {
  LINKEDIN
  TWITTER
  FACEBOOK
  INSTAGRAM
  MULTI_PLATFORM
}

enum LeadStatus {
  HOT
  WARM
  COLD
}

enum ActivityType {
  LEAD_QUALIFIED
  CAMPAIGN_MILESTONE
  AI_OPTIMIZATION
  LEAD_SCORED
}